package com.ns.common.util.jaxb;import com.ns.common.util.gson.GsonUtil;import org.apache.commons.io.IOUtils;import javax.xml.bind.JAXBContext;import javax.xml.bind.JAXBException;import javax.xml.bind.Marshaller;import javax.xml.bind.Unmarshaller;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;public class JAXBUtil {    /**     * 生成xml文件的二进制数据     */    public static byte[] marshal(Object obj) throws JAXBException {        JAXBContext context = JAXBCache.instance().getJAXBContext(obj.getClass());        Marshaller m = context.createMarshaller();        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.FALSE);        m.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);        m.marshal(obj, outputStream);        byte[] result = outputStream.toByteArray();        return result;    }    /**     * jaxb生成xml的java 类对象     */    public static <T> T unmarshal(byte[] data, Class<T> classe) throws JAXBException {        JAXBContext context = JAXBCache.instance().getJAXBContext(classe);        Unmarshaller m = context.createUnmarshaller();        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);        Object obj = m.unmarshal(inputStream);        return GsonUtil.fromJson(GsonUtil.toJson(obj), classe);    }    /**     * jaxb生成xml的java 类对象     */    public static Object unmarshal(InputStream in, Class<?> classe) throws JAXBException, IOException {        JAXBContext context = JAXBCache.instance().getJAXBContext(classe);        byte[] data = IOUtils.toByteArray(in);        Unmarshaller m = context.createUnmarshaller();        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);        Object obj = m.unmarshal(inputStream);        return obj;    }}